name: Flutter Release Build CI/CD

# 触发条件配置
on:
  push:
    tags:
      - 'v*' # 当推送的标签以"v"开头时触发，常用于版本发布
  workflow_dispatch: # 允许手动触发工作流，便于管理和测试

jobs:
  build:
    runs-on: ${{ matrix.os }} # 使用矩阵策略中指定的操作系统进行构建
    strategy:
      matrix:
        include:
          # 定义不同的构建任务，每个任务对应一个平台
          - name: android
            os: ubuntu-latest
          - name: android-aab
            os: ubuntu-latest
          - name: web
            os: ubuntu-latest
          - name: linux
            os: ubuntu-latest
          - name: windows
            os: windows-latest
          - name: ios
            os: macos-latest
          - name: macos
            os: macos-latest

    steps:
      # 检出代码
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # 获取全部历史，以便计算版本号

      # 生成版本号
      - name: Generate Version Number
        id: generate_version
        run: |
          if [[ ${{ github.ref }} == refs/tags/* ]]; then
            # 这是一个标签
            TAG_VERSION=$(echo ${{ github.ref }} | sed -E 's/^refs\/tags\/(v)?//')
            echo "This is a tag release: $TAG_VERSION"
          elif [[ ${{ github.ref }} == refs/heads/* ]]; then
            # 这是一个分支
            TAG_VERSION=$(echo ${{ github.ref }} | sed -E 's/^refs\/heads\///' | sed 's/\//-/g')
            echo "This is a branch push: $TAG_VERSION"
          elif [[ ${{ github.ref }} == refs/pull/* ]]; then
            # 这是一个 Pull Request
            PR_NUMBER=$(echo ${{ github.ref }} | sed -E 's/^refs\/pull\/([0-9]+)\/merge$/\1/')
            TAG_VERSION="pr-$PR_NUMBER"
            echo "This is a Pull Request: $TAG_VERSION"
          else
            TAG_VERSION=$(echo ${{ github.ref }} | sed 's/\//-/g')
            echo "This is another trigger: $TAG_VERSION"
          fi
          echo "TAG_VERSION=$TAG_VERSION" 
          COMMIT_COUNT=$(git rev-list --count HEAD) # 计算提交数量
          SHORT_HASH=$(git rev-parse --short HEAD) # 获取最近一次提交的短哈希
          BUILD_VERSION="${COMMIT_COUNT}+${TAG_VERSION}.${SHORT_HASH}" # 组合成完整的构建版本号
          echo "BUILD_VERSION=${BUILD_VERSION}" >> $GITHUB_OUTPUT # 设置输出变量
          echo "Generated BUILD_VERSION: ${BUILD_VERSION}" # 打印完整的构建版本号 (e.g. 34+fl_wan.c761fc9)
        shell: bash

      # 更新pubspec.yaml中的版本号
      - name: Update version in pubspec.yaml
        id: update_version_in_pubspec
        run: |
          # 从pubspec.yaml中提取主版本号,(e.g. version: 1.0.0+1，提取1.0.0)
          MAIN_VERSION=$(grep "^version:" pubspec.yaml | sed -E 's/version: ([0-9]+\.[0-9]+\.[0-9]+).*/\1/')
          # 组合新的完整版本号 (e.g. 1.0.0-34+fl_wan.c761fc9)
          FULL_VERSION="${MAIN_VERSION}-${{ steps.generate_version.outputs.BUILD_VERSION }}"
          # 更新新版本号到pubspec.yaml文件
          sed -i 's#^version: .*#version: ${FULL_VERSION}#' pubspec.yaml
          # 验证更新
          if grep -q "^version: ${FULL_VERSION}" pubspec.yaml; then
            echo "Version updated successfully to ${FULL_VERSION}"
          else
            echo "Failed to update version"
            exit 1
          fi
          echo "FULL_VERSION=${FULL_VERSION}" >> $GITHUB_OUTPUT # 设置输出变量
        shell: bash

      # 设置Flutter环境
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # 使用Flutter的稳定版

      # 显示Flutter版本信息
      - name: Check Flutter version
        run: flutter --version
      
      # 安装Flutter依赖
      - name: Install dependencies
        run: flutter pub get

      # 根据矩阵配置，为不同平台执行构建命令
      - name: Build Android APK
        if: matrix.name == 'android'
        run: flutter build apk --release

      - name: Build Android App Bundle
        if: matrix.name == 'android-aab'
        run: flutter build appbundle --release

      - name: Build Web
        if: matrix.name == 'web'
        run: flutter build web --release

      - name: Install Linux dependencies
        if: matrix.name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build libgtk-3-dev
      - name: Build Linux
        if: matrix.name == 'linux'
        run: flutter build linux --release

      - name: Build Windows
        if: matrix.name == 'windows'
        run: flutter build windows --release

      - name: Build iOS
        if: matrix.name == 'ios'
        run: flutter build ios --release --no-codesign

      - name: Build macOS
        if: matrix.name == 'macos'
        run: flutter build macos --release

      # 部署Web平台构建产物到GitHub Pages
      - name: Deploy to GitHub Pages
        if: matrix.name == 'web'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./build/web
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy to GitHub Pages: ${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}'

      # 创建GitHub Release
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Debug Release ${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}
          draft: false
          prerelease: true

      # 根据平台压缩构建产物，为上传做准备
      # 使用不同的命令和文件路径根据平台进行压缩
      # 这里使用了不同的shell命令和条件判断来处理不同的操作系统和构建产物
      - name: Compress Build
        run: |
          if [ "${{ matrix.name }}" = "android" ]; then
            mv build/app/outputs/flutter-apk/app-debug.apk ./app-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.apk
          elif [ "${{ matrix.name }}" = "android-aab" ]; then
            mv build/app/outputs/bundle/debug/app-debug.aab ./app-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.aab
          elif [ "${{ matrix.name }}" = "web" ]; then
            zip -r web-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.zip build/web
          elif [ "${{ matrix.name }}" = "linux" ]; then
            zip -r linux-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.zip build/linux/debug/bundle
          elif [ "${{ matrix.name }}" = "windows" ]; then
            powershell Compress-Archive build/windows/runner/Debug windows-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.zip
          elif [ "${{ matrix.name }}" = "ios" ]; then
            zip -r ios-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.zip build/ios/Debug-iphonesimulator
          elif [ "${{ matrix.name }}" = "macos" ]; then
            zip -r macos-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.zip build/macos/Build/Products/Debug
          fi
        shell: bash

      # 上传构建产物到GitHub Release
      - name: Upload Build
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.name }}-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.${{ matrix.name == 'android' && 'apk' || matrix.name == 'android-aab' && 'aab' || 'zip' }}
          asset_name: ${{ matrix.name }}-debug-${{ steps.update_version_in_pubspec.outputs.FULL_VERSION }}.${{ matrix.name == 'android' && 'apk' || matrix.name == 'android-aab' && 'aab' || 'zip' }}
          asset_content_type: ${{ matrix.name == 'android' && 'application/vnd.android.package-archive' || matrix.name == 'android-aab' && 'application/vnd.android.package-archive' || 'application/zip' }}